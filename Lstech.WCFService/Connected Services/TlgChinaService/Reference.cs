//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TlgChinaService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://oa.tlgchina.com:8081/", ConfigurationName="TlgChinaService.lytechWebServiceSoap")]
    public interface lytechWebServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/CreateQRCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.CreateQRCodeResponse> CreateQRCodeAsync(TlgChinaService.CreateQRCodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/DecodeQRCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.DecodeQRCodeResponse> DecodeQRCodeAsync(TlgChinaService.DecodeQRCodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setWatermark", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.setWatermarkResponse> setWatermarkAsync(TlgChinaService.setWatermarkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setWatermarkWorkFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.setWatermarkWorkFlowResponse> setWatermarkWorkFlowAsync(TlgChinaService.setWatermarkWorkFlowRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ModifyADpassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ModifyADpasswordAsync(string username, string oldpwd, string newpwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/UpdateAdUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateAdUserAsync(string sqlConnectionString, string TableName, string Username, string PassWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/AD_User_Query", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AD_User_QueryAsync(string username, string password, string QueryADusername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/AD_User_Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AD_User_CreateAsync(string username, string password, string workno, string cname, string ADUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/AD_User_Disable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AD_User_DisableAsync(string username, string password, string WorkNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ExecOracleQuerySql", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.ExecOracleQuerySqlResponseExecOracleQuerySqlResult> ExecOracleQuerySqlAsync(string sqlstr, string sqlConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ExecSqlNew", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.ExecSqlNewResponse> ExecSqlNewAsync(TlgChinaService.ExecSqlNewRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ExecSqlStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.ExecSqlStrResponseExecSqlStrResult> ExecSqlStrAsync(string sqlConnectionString, string sqlstr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ExecFirebirdSql", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.ExecFirebirdSqlResponse> ExecFirebirdSqlAsync(TlgChinaService.ExecFirebirdSqlRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetUserADGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetUserADGUIDAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.sendMailResponse> sendMailAsync(TlgChinaService.sendMailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendMailWithCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.sendMailWithCCResponse> sendMailWithCCAsync(TlgChinaService.sendMailWithCCRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetDingTaikSignature", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDingTaikSignatureAsync(string url, string agentId, string CorpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetUserInfoAndLastAppr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetUserInfoAndLastApprAsync(string code, string ProcessCode, string corpid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTalkWorkFlowService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendDingTalkWorkFlowServiceAsync(string ProcessCode, string OriginatorUserId, string DeptId, string Approvers, string CcList, string jsonstr, string ReceiveUrl, string sysName, string FClient, string CenterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTalkWorkFlowJson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendDingTalkWorkFlowJsonAsync(string ProcessCode, string OriginatorUserId, string DeptId, string Approvers, string CcList, string jsonstr, string ReceiveUrl, string sysName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTalkWorkFlowTms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendDingTalkWorkFlowTmsAsync(string ProcessCode, string OriginatorUserJobnumber, string ApproversJobnumber, string CcListJobnumber, string jsonstr, string ReceiveUrl, string sysName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/CreateDingTalkGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateDingTalkGroupAsync(string GroupName, string owner, string useridlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendGroupDingTalk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendGroupDingTalkAsync(string chatid, string title, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendGroupDingTalkLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendGroupDingTalkLinkAsync(string chatid, string URL, string title, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setDingTalk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> setDingTalkAsync(string userIDS, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setDingDTalk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> setDingDTalkAsync(string userIDS, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setDingTalkLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> setDingTalkLinkAsync(string userIDS, string URL, string title, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/setDingTalkOA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> setDingTalkOAAsync(string userIDS, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTalkImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.sendDingTalkImageResponse> sendDingTalkImageAsync(TlgChinaService.sendDingTalkImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTalkFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.sendDingTalkFileResponse> sendDingTalkFileAsync(TlgChinaService.sendDingTalkFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingMouldWorkFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task sendDingMouldWorkFlowAsync(string FBtype, string FuserID, string FInterID, string companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SendAppMsgByDeviceToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SendAppMsgByDeviceTokenAsync(string deviceToken, string msgTitle, string msgContent, int badge, bool isFormal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/DingTalksimplelist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DingTalksimplelistAsync(long role_id, long size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SendAppMsgByADUserName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SendAppMsgByADUserNameAsync(string username, string msgTitle, string msgContent, int badge, bool isFormal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/MESAOI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> MESAOIAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/ReSendDingTalk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ReSendDingTalkAsync(string FprocessInstanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/execDingTalkBPMCompleted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> execDingTalkBPMCompletedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetSapHead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSapHeadAsync(string jobnumber, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetSapFormDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSapFormDetailAsync(string FID, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SapReject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SapRejectAsync(string Fnumber, string FormID, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetSAPConn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSAPConnAsync(string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetHrUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetHrUserAsync(string CardReader, TlgChinaService.CardType cardType, string ResoultType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/WorkFlowGoBack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task WorkFlowGoBackAsync(string FForm_HeadID, string content_deal_comment, string FCurrent_WorkFlowNodeID, string backToNode, string FCurrent_User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/WorkFlowSubmit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.WorkFlowSubmitResponse> WorkFlowSubmitAsync(TlgChinaService.WorkFlowSubmitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/sendDingTallkCallBack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task sendDingTallkCallBackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SAPMDMSynchronize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SAPMDMSynchronizeAsync(int MDMlevel, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/GetSAPJson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSAPJsonAsync(string functionname, string sapinputparams, string returnobj, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/DingTalkSendConfirm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DingTalkSendConfirmAsync(string Fnumber, string FClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SAPSendDataToSAP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<object> SAPSendDataToSAPAsync(string FunctionName, TlgChinaService.ArrayOfXElement InputTables, string[] InputParams, string[] OutPutParam, bool isTable, string FClient);
        
        // CODEGEN: 正在生成消息协定，因为操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SAPSendDataToSAPAndResoultDataSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.SAPSendDataToSAPAndResoultDataSetResponse> SAPSendDataToSAPAndResoultDataSetAsync(TlgChinaService.SAPSendDataToSAPAndResoultDataSetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/DelDingTalkNotActiveUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DelDingTalkNotActiveUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/DownLoadDingORG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DownLoadDingORGAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/UpdateDingTalkORG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateDingTalkORGAsync(string hr_Department, string hr_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/UpdateFaceRecognitionORG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateFaceRecognitionORGAsync(string hr_Department_ID, string entertype, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/CallUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task CallUrlAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SyncOA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SyncOAAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/SAPagain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SAPagainAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/WMSCheckOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TlgChinaService.WMSCheckOutResponseWMSCheckOutResult> WMSCheckOutAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/RobotMsg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RobotMsgAsync(string RobotWebhook, string content, string atMobiles, bool isAtAll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/EASGetApprover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EASGetApproverAsync(string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://oa.tlgchina.com:8081/testqqqq", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> testqqqqAsync(string a);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateQRCode", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class CreateQRCodeRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string QRString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public bool IsDM;
        
        public CreateQRCodeRequest()
        {
        }
        
        public CreateQRCodeRequest(string QRString, bool IsDM)
        {
            this.QRString = QRString;
            this.IsDM = IsDM;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateQRCodeResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class CreateQRCodeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreateQRCodeResult;
        
        public CreateQRCodeResponse()
        {
        }
        
        public CreateQRCodeResponse(byte[] CreateQRCodeResult)
        {
            this.CreateQRCodeResult = CreateQRCodeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DecodeQRCode", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class DecodeQRCodeRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        public DecodeQRCodeRequest()
        {
        }
        
        public DecodeQRCodeRequest(byte[] data)
        {
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DecodeQRCodeResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class DecodeQRCodeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string DecodeQRCodeResult;
        
        public DecodeQRCodeResponse()
        {
        }
        
        public DecodeQRCodeResponse(string DecodeQRCodeResult)
        {
            this.DecodeQRCodeResult = DecodeQRCodeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setWatermark", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class setWatermarkRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string pwd;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        public string[] waterText;
        
        public setWatermarkRequest()
        {
        }
        
        public setWatermarkRequest(byte[] data, string pwd, string[] waterText)
        {
            this.data = data;
            this.pwd = pwd;
            this.waterText = waterText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setWatermarkResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class setWatermarkResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] setWatermarkResult;
        
        public setWatermarkResponse()
        {
        }
        
        public setWatermarkResponse(byte[] setWatermarkResult)
        {
            this.setWatermarkResult = setWatermarkResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setWatermarkWorkFlow", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class setWatermarkWorkFlowRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string workflow;
        
        public setWatermarkWorkFlowRequest()
        {
        }
        
        public setWatermarkWorkFlowRequest(byte[] data, string workflow)
        {
            this.data = data;
            this.workflow = workflow;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setWatermarkWorkFlowResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class setWatermarkWorkFlowResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] setWatermarkWorkFlowResult;
        
        public setWatermarkWorkFlowResponse()
        {
        }
        
        public setWatermarkWorkFlowResponse(byte[] setWatermarkWorkFlowResult)
        {
            this.setWatermarkWorkFlowResult = setWatermarkWorkFlowResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class ExecOracleQuerySqlResponseExecOracleQuerySqlResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class ExecSqlNewResponseExecSqlNewResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecSqlNew", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class ExecSqlNewRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string sqlConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] execlist;
        
        public ExecSqlNewRequest()
        {
        }
        
        public ExecSqlNewRequest(string sqlConnectionString, byte[] execlist)
        {
            this.sqlConnectionString = sqlConnectionString;
            this.execlist = execlist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecSqlNewResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class ExecSqlNewResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public TlgChinaService.ExecSqlNewResponseExecSqlNewResult ExecSqlNewResult;
        
        public ExecSqlNewResponse()
        {
        }
        
        public ExecSqlNewResponse(TlgChinaService.ExecSqlNewResponseExecSqlNewResult ExecSqlNewResult)
        {
            this.ExecSqlNewResult = ExecSqlNewResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class ExecSqlStrResponseExecSqlStrResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class ExecFirebirdSqlResponseExecFirebirdSqlResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecFirebirdSql", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class ExecFirebirdSqlRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string sqlConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] execlist;
        
        public ExecFirebirdSqlRequest()
        {
        }
        
        public ExecFirebirdSqlRequest(string sqlConnectionString, byte[] execlist)
        {
            this.sqlConnectionString = sqlConnectionString;
            this.execlist = execlist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecFirebirdSqlResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class ExecFirebirdSqlResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public TlgChinaService.ExecFirebirdSqlResponseExecFirebirdSqlResult ExecFirebirdSqlResult;
        
        public ExecFirebirdSqlResponse()
        {
        }
        
        public ExecFirebirdSqlResponse(TlgChinaService.ExecFirebirdSqlResponseExecFirebirdSqlResult ExecFirebirdSqlResult)
        {
            this.ExecFirebirdSqlResult = ExecFirebirdSqlResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendMail", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendMailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string To;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string Subject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        public string Content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=3)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileBbytes;
        
        public sendMailRequest()
        {
        }
        
        public sendMailRequest(string To, string Subject, string Content, string FileName, byte[] FileBbytes)
        {
            this.To = To;
            this.Subject = Subject;
            this.Content = Content;
            this.FileName = FileName;
            this.FileBbytes = FileBbytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendMailResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendMailResponse
    {
        
        public sendMailResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendMailWithCC", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendMailWithCCRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string To;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string CC;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        public string Subject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=3)]
        public string Content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=4)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileBbytes;
        
        public sendMailWithCCRequest()
        {
        }
        
        public sendMailWithCCRequest(string To, string CC, string Subject, string Content, string FileName, byte[] FileBbytes)
        {
            this.To = To;
            this.CC = CC;
            this.Subject = Subject;
            this.Content = Content;
            this.FileName = FileName;
            this.FileBbytes = FileBbytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendMailWithCCResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendMailWithCCResponse
    {
        
        public sendMailWithCCResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendDingTalkImage", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendDingTalkImageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string userIDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        public sendDingTalkImageRequest()
        {
        }
        
        public sendDingTalkImageRequest(string userIDS, byte[] data)
        {
            this.userIDS = userIDS;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendDingTalkImageResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendDingTalkImageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string sendDingTalkImageResult;
        
        public sendDingTalkImageResponse()
        {
        }
        
        public sendDingTalkImageResponse(string sendDingTalkImageResult)
        {
            this.sendDingTalkImageResult = sendDingTalkImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendDingTalkFile", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendDingTalkFileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string userIDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        public string filename;
        
        public sendDingTalkFileRequest()
        {
        }
        
        public sendDingTalkFileRequest(string userIDS, byte[] data, string filename)
        {
            this.userIDS = userIDS;
            this.data = data;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendDingTalkFileResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class sendDingTalkFileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string sendDingTalkFileResult;
        
        public sendDingTalkFileResponse()
        {
        }
        
        public sendDingTalkFileResponse(string sendDingTalkFileResult)
        {
            this.sendDingTalkFileResult = sendDingTalkFileResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oa.tlgchina.com:8081/")]
    public enum CardType
    {
        
        /// <remarks/>
        ICCARD,
        
        /// <remarks/>
        JOBNUMBER,
        
        /// <remarks/>
        TEL,
        
        /// <remarks/>
        USERNAME,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class ArrayOfDataTableDataTable
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WorkFlowSubmit", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class WorkFlowSubmitRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string FForm_HeadID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string FCurrent_WorkFlowNodeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("DataTable")]
        public TlgChinaService.ArrayOfDataTableDataTable[] Detail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=3)]
        public string FForm_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=4)]
        public string FcompanyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=5)]
        public string FCurrent_User;
        
        public WorkFlowSubmitRequest()
        {
        }
        
        public WorkFlowSubmitRequest(string FForm_HeadID, string FCurrent_WorkFlowNodeID, TlgChinaService.ArrayOfDataTableDataTable[] Detail, string FForm_ID, string FcompanyID, string FCurrent_User)
        {
            this.FForm_HeadID = FForm_HeadID;
            this.FCurrent_WorkFlowNodeID = FCurrent_WorkFlowNodeID;
            this.Detail = Detail;
            this.FForm_ID = FForm_ID;
            this.FcompanyID = FcompanyID;
            this.FCurrent_User = FCurrent_User;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WorkFlowSubmitResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class WorkFlowSubmitResponse
    {
        
        public WorkFlowSubmitResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SAPSendDataToSAPAndResoultDataSet", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class SAPSendDataToSAPAndResoultDataSetRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public string FunctionName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public TlgChinaService.ArrayOfXElement InputTables;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=2)]
        public string[] InputParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=3)]
        public string[] OutPutTableNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=4)]
        public string[] OutPutParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=5)]
        public string FClient;
        
        public SAPSendDataToSAPAndResoultDataSetRequest()
        {
        }
        
        public SAPSendDataToSAPAndResoultDataSetRequest(string FunctionName, TlgChinaService.ArrayOfXElement InputTables, string[] InputParams, string[] OutPutTableNames, string[] OutPutParams, string FClient)
        {
            this.FunctionName = FunctionName;
            this.InputTables = InputTables;
            this.InputParams = InputParams;
            this.OutPutTableNames = OutPutTableNames;
            this.OutPutParams = OutPutParams;
            this.FClient = FClient;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SAPSendDataToSAPAndResoultDataSetResponse", WrapperNamespace="http://oa.tlgchina.com:8081/", IsWrapped=true)]
    public partial class SAPSendDataToSAPAndResoultDataSetResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=0)]
        public TlgChinaService.ArrayOfXElement SAPSendDataToSAPAndResoultDataSetResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://oa.tlgchina.com:8081/", Order=1)]
        public string OutPutValues;
        
        public SAPSendDataToSAPAndResoultDataSetResponse()
        {
        }
        
        public SAPSendDataToSAPAndResoultDataSetResponse(TlgChinaService.ArrayOfXElement SAPSendDataToSAPAndResoultDataSetResult, string OutPutValues)
        {
            this.SAPSendDataToSAPAndResoultDataSetResult = SAPSendDataToSAPAndResoultDataSetResult;
            this.OutPutValues = OutPutValues;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oa.tlgchina.com:8081/")]
    public partial class WMSCheckOutResponseWMSCheckOutResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface lytechWebServiceSoapChannel : TlgChinaService.lytechWebServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class lytechWebServiceSoapClient : System.ServiceModel.ClientBase<TlgChinaService.lytechWebServiceSoap>, TlgChinaService.lytechWebServiceSoap
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public lytechWebServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(lytechWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), lytechWebServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public lytechWebServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(lytechWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public lytechWebServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(lytechWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public lytechWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync()
        {
            return base.Channel.HelloWorldAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.CreateQRCodeResponse> TlgChinaService.lytechWebServiceSoap.CreateQRCodeAsync(TlgChinaService.CreateQRCodeRequest request)
        {
            return base.Channel.CreateQRCodeAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.CreateQRCodeResponse> CreateQRCodeAsync(string QRString, bool IsDM)
        {
            TlgChinaService.CreateQRCodeRequest inValue = new TlgChinaService.CreateQRCodeRequest();
            inValue.QRString = QRString;
            inValue.IsDM = IsDM;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).CreateQRCodeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.DecodeQRCodeResponse> TlgChinaService.lytechWebServiceSoap.DecodeQRCodeAsync(TlgChinaService.DecodeQRCodeRequest request)
        {
            return base.Channel.DecodeQRCodeAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.DecodeQRCodeResponse> DecodeQRCodeAsync(byte[] data)
        {
            TlgChinaService.DecodeQRCodeRequest inValue = new TlgChinaService.DecodeQRCodeRequest();
            inValue.data = data;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).DecodeQRCodeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.setWatermarkResponse> TlgChinaService.lytechWebServiceSoap.setWatermarkAsync(TlgChinaService.setWatermarkRequest request)
        {
            return base.Channel.setWatermarkAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.setWatermarkResponse> setWatermarkAsync(byte[] data, string pwd, string[] waterText)
        {
            TlgChinaService.setWatermarkRequest inValue = new TlgChinaService.setWatermarkRequest();
            inValue.data = data;
            inValue.pwd = pwd;
            inValue.waterText = waterText;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).setWatermarkAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.setWatermarkWorkFlowResponse> TlgChinaService.lytechWebServiceSoap.setWatermarkWorkFlowAsync(TlgChinaService.setWatermarkWorkFlowRequest request)
        {
            return base.Channel.setWatermarkWorkFlowAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.setWatermarkWorkFlowResponse> setWatermarkWorkFlowAsync(byte[] data, string workflow)
        {
            TlgChinaService.setWatermarkWorkFlowRequest inValue = new TlgChinaService.setWatermarkWorkFlowRequest();
            inValue.data = data;
            inValue.workflow = workflow;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).setWatermarkWorkFlowAsync(inValue);
        }
        
        public System.Threading.Tasks.Task ModifyADpasswordAsync(string username, string oldpwd, string newpwd)
        {
            return base.Channel.ModifyADpasswordAsync(username, oldpwd, newpwd);
        }
        
        public System.Threading.Tasks.Task UpdateAdUserAsync(string sqlConnectionString, string TableName, string Username, string PassWord)
        {
            return base.Channel.UpdateAdUserAsync(sqlConnectionString, TableName, Username, PassWord);
        }
        
        public System.Threading.Tasks.Task<string> AD_User_QueryAsync(string username, string password, string QueryADusername)
        {
            return base.Channel.AD_User_QueryAsync(username, password, QueryADusername);
        }
        
        public System.Threading.Tasks.Task<string> AD_User_CreateAsync(string username, string password, string workno, string cname, string ADUserName)
        {
            return base.Channel.AD_User_CreateAsync(username, password, workno, cname, ADUserName);
        }
        
        public System.Threading.Tasks.Task<string> AD_User_DisableAsync(string username, string password, string WorkNo)
        {
            return base.Channel.AD_User_DisableAsync(username, password, WorkNo);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.ExecOracleQuerySqlResponseExecOracleQuerySqlResult> ExecOracleQuerySqlAsync(string sqlstr, string sqlConnectionString)
        {
            return base.Channel.ExecOracleQuerySqlAsync(sqlstr, sqlConnectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.ExecSqlNewResponse> TlgChinaService.lytechWebServiceSoap.ExecSqlNewAsync(TlgChinaService.ExecSqlNewRequest request)
        {
            return base.Channel.ExecSqlNewAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.ExecSqlNewResponse> ExecSqlNewAsync(string sqlConnectionString, byte[] execlist)
        {
            TlgChinaService.ExecSqlNewRequest inValue = new TlgChinaService.ExecSqlNewRequest();
            inValue.sqlConnectionString = sqlConnectionString;
            inValue.execlist = execlist;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).ExecSqlNewAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.ExecSqlStrResponseExecSqlStrResult> ExecSqlStrAsync(string sqlConnectionString, string sqlstr)
        {
            return base.Channel.ExecSqlStrAsync(sqlConnectionString, sqlstr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.ExecFirebirdSqlResponse> TlgChinaService.lytechWebServiceSoap.ExecFirebirdSqlAsync(TlgChinaService.ExecFirebirdSqlRequest request)
        {
            return base.Channel.ExecFirebirdSqlAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.ExecFirebirdSqlResponse> ExecFirebirdSqlAsync(string sqlConnectionString, byte[] execlist)
        {
            TlgChinaService.ExecFirebirdSqlRequest inValue = new TlgChinaService.ExecFirebirdSqlRequest();
            inValue.sqlConnectionString = sqlConnectionString;
            inValue.execlist = execlist;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).ExecFirebirdSqlAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> GetUserADGUIDAsync(string username, string password)
        {
            return base.Channel.GetUserADGUIDAsync(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.sendMailResponse> TlgChinaService.lytechWebServiceSoap.sendMailAsync(TlgChinaService.sendMailRequest request)
        {
            return base.Channel.sendMailAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.sendMailResponse> sendMailAsync(string To, string Subject, string Content, string FileName, byte[] FileBbytes)
        {
            TlgChinaService.sendMailRequest inValue = new TlgChinaService.sendMailRequest();
            inValue.To = To;
            inValue.Subject = Subject;
            inValue.Content = Content;
            inValue.FileName = FileName;
            inValue.FileBbytes = FileBbytes;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).sendMailAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.sendMailWithCCResponse> TlgChinaService.lytechWebServiceSoap.sendMailWithCCAsync(TlgChinaService.sendMailWithCCRequest request)
        {
            return base.Channel.sendMailWithCCAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.sendMailWithCCResponse> sendMailWithCCAsync(string To, string CC, string Subject, string Content, string FileName, byte[] FileBbytes)
        {
            TlgChinaService.sendMailWithCCRequest inValue = new TlgChinaService.sendMailWithCCRequest();
            inValue.To = To;
            inValue.CC = CC;
            inValue.Subject = Subject;
            inValue.Content = Content;
            inValue.FileName = FileName;
            inValue.FileBbytes = FileBbytes;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).sendMailWithCCAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> GetDingTaikSignatureAsync(string url, string agentId, string CorpId)
        {
            return base.Channel.GetDingTaikSignatureAsync(url, agentId, CorpId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoAndLastApprAsync(string code, string ProcessCode, string corpid)
        {
            return base.Channel.GetUserInfoAndLastApprAsync(code, ProcessCode, corpid);
        }
        
        public System.Threading.Tasks.Task<string> sendDingTalkWorkFlowServiceAsync(string ProcessCode, string OriginatorUserId, string DeptId, string Approvers, string CcList, string jsonstr, string ReceiveUrl, string sysName, string FClient, string CenterID)
        {
            return base.Channel.sendDingTalkWorkFlowServiceAsync(ProcessCode, OriginatorUserId, DeptId, Approvers, CcList, jsonstr, ReceiveUrl, sysName, FClient, CenterID);
        }
        
        public System.Threading.Tasks.Task<string> sendDingTalkWorkFlowJsonAsync(string ProcessCode, string OriginatorUserId, string DeptId, string Approvers, string CcList, string jsonstr, string ReceiveUrl, string sysName)
        {
            return base.Channel.sendDingTalkWorkFlowJsonAsync(ProcessCode, OriginatorUserId, DeptId, Approvers, CcList, jsonstr, ReceiveUrl, sysName);
        }
        
        public System.Threading.Tasks.Task<string> sendDingTalkWorkFlowTmsAsync(string ProcessCode, string OriginatorUserJobnumber, string ApproversJobnumber, string CcListJobnumber, string jsonstr, string ReceiveUrl, string sysName)
        {
            return base.Channel.sendDingTalkWorkFlowTmsAsync(ProcessCode, OriginatorUserJobnumber, ApproversJobnumber, CcListJobnumber, jsonstr, ReceiveUrl, sysName);
        }
        
        public System.Threading.Tasks.Task<string> CreateDingTalkGroupAsync(string GroupName, string owner, string useridlist)
        {
            return base.Channel.CreateDingTalkGroupAsync(GroupName, owner, useridlist);
        }
        
        public System.Threading.Tasks.Task<string> sendGroupDingTalkAsync(string chatid, string title, string Content)
        {
            return base.Channel.sendGroupDingTalkAsync(chatid, title, Content);
        }
        
        public System.Threading.Tasks.Task<string> sendGroupDingTalkLinkAsync(string chatid, string URL, string title, string msg)
        {
            return base.Channel.sendGroupDingTalkLinkAsync(chatid, URL, title, msg);
        }
        
        public System.Threading.Tasks.Task<string> setDingTalkAsync(string userIDS, string Content)
        {
            return base.Channel.setDingTalkAsync(userIDS, Content);
        }
        
        public System.Threading.Tasks.Task<string> setDingDTalkAsync(string userIDS, string Content)
        {
            return base.Channel.setDingDTalkAsync(userIDS, Content);
        }
        
        public System.Threading.Tasks.Task<string> setDingTalkLinkAsync(string userIDS, string URL, string title, string msg)
        {
            return base.Channel.setDingTalkLinkAsync(userIDS, URL, title, msg);
        }
        
        public System.Threading.Tasks.Task<string> setDingTalkOAAsync(string userIDS, string Content)
        {
            return base.Channel.setDingTalkOAAsync(userIDS, Content);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.sendDingTalkImageResponse> TlgChinaService.lytechWebServiceSoap.sendDingTalkImageAsync(TlgChinaService.sendDingTalkImageRequest request)
        {
            return base.Channel.sendDingTalkImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.sendDingTalkImageResponse> sendDingTalkImageAsync(string userIDS, byte[] data)
        {
            TlgChinaService.sendDingTalkImageRequest inValue = new TlgChinaService.sendDingTalkImageRequest();
            inValue.userIDS = userIDS;
            inValue.data = data;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).sendDingTalkImageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.sendDingTalkFileResponse> TlgChinaService.lytechWebServiceSoap.sendDingTalkFileAsync(TlgChinaService.sendDingTalkFileRequest request)
        {
            return base.Channel.sendDingTalkFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.sendDingTalkFileResponse> sendDingTalkFileAsync(string userIDS, byte[] data, string filename)
        {
            TlgChinaService.sendDingTalkFileRequest inValue = new TlgChinaService.sendDingTalkFileRequest();
            inValue.userIDS = userIDS;
            inValue.data = data;
            inValue.filename = filename;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).sendDingTalkFileAsync(inValue);
        }
        
        public System.Threading.Tasks.Task sendDingMouldWorkFlowAsync(string FBtype, string FuserID, string FInterID, string companyID)
        {
            return base.Channel.sendDingMouldWorkFlowAsync(FBtype, FuserID, FInterID, companyID);
        }
        
        public System.Threading.Tasks.Task SendAppMsgByDeviceTokenAsync(string deviceToken, string msgTitle, string msgContent, int badge, bool isFormal)
        {
            return base.Channel.SendAppMsgByDeviceTokenAsync(deviceToken, msgTitle, msgContent, badge, isFormal);
        }
        
        public System.Threading.Tasks.Task<string> DingTalksimplelistAsync(long role_id, long size)
        {
            return base.Channel.DingTalksimplelistAsync(role_id, size);
        }
        
        public System.Threading.Tasks.Task SendAppMsgByADUserNameAsync(string username, string msgTitle, string msgContent, int badge, bool isFormal)
        {
            return base.Channel.SendAppMsgByADUserNameAsync(username, msgTitle, msgContent, badge, isFormal);
        }
        
        public System.Threading.Tasks.Task<bool> MESAOIAsync(string str)
        {
            return base.Channel.MESAOIAsync(str);
        }
        
        public System.Threading.Tasks.Task ReSendDingTalkAsync(string FprocessInstanceId)
        {
            return base.Channel.ReSendDingTalkAsync(FprocessInstanceId);
        }
        
        public System.Threading.Tasks.Task<string> execDingTalkBPMCompletedAsync()
        {
            return base.Channel.execDingTalkBPMCompletedAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetSapHeadAsync(string jobnumber, string FClient)
        {
            return base.Channel.GetSapHeadAsync(jobnumber, FClient);
        }
        
        public System.Threading.Tasks.Task<string> GetSapFormDetailAsync(string FID, string FClient)
        {
            return base.Channel.GetSapFormDetailAsync(FID, FClient);
        }
        
        public System.Threading.Tasks.Task<string> SapRejectAsync(string Fnumber, string FormID, string FClient)
        {
            return base.Channel.SapRejectAsync(Fnumber, FormID, FClient);
        }
        
        public System.Threading.Tasks.Task<string> GetSAPConnAsync(string FClient)
        {
            return base.Channel.GetSAPConnAsync(FClient);
        }
        
        public System.Threading.Tasks.Task<string> GetHrUserAsync(string CardReader, TlgChinaService.CardType cardType, string ResoultType)
        {
            return base.Channel.GetHrUserAsync(CardReader, cardType, ResoultType);
        }
        
        public System.Threading.Tasks.Task WorkFlowGoBackAsync(string FForm_HeadID, string content_deal_comment, string FCurrent_WorkFlowNodeID, string backToNode, string FCurrent_User)
        {
            return base.Channel.WorkFlowGoBackAsync(FForm_HeadID, content_deal_comment, FCurrent_WorkFlowNodeID, backToNode, FCurrent_User);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TlgChinaService.WorkFlowSubmitResponse> TlgChinaService.lytechWebServiceSoap.WorkFlowSubmitAsync(TlgChinaService.WorkFlowSubmitRequest request)
        {
            return base.Channel.WorkFlowSubmitAsync(request);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.WorkFlowSubmitResponse> WorkFlowSubmitAsync(string FForm_HeadID, string FCurrent_WorkFlowNodeID, TlgChinaService.ArrayOfDataTableDataTable[] Detail, string FForm_ID, string FcompanyID, string FCurrent_User)
        {
            TlgChinaService.WorkFlowSubmitRequest inValue = new TlgChinaService.WorkFlowSubmitRequest();
            inValue.FForm_HeadID = FForm_HeadID;
            inValue.FCurrent_WorkFlowNodeID = FCurrent_WorkFlowNodeID;
            inValue.Detail = Detail;
            inValue.FForm_ID = FForm_ID;
            inValue.FcompanyID = FcompanyID;
            inValue.FCurrent_User = FCurrent_User;
            return ((TlgChinaService.lytechWebServiceSoap)(this)).WorkFlowSubmitAsync(inValue);
        }
        
        public System.Threading.Tasks.Task sendDingTallkCallBackAsync()
        {
            return base.Channel.sendDingTallkCallBackAsync();
        }
        
        public System.Threading.Tasks.Task SAPMDMSynchronizeAsync(int MDMlevel, string FClient)
        {
            return base.Channel.SAPMDMSynchronizeAsync(MDMlevel, FClient);
        }
        
        public System.Threading.Tasks.Task<string> GetSAPJsonAsync(string functionname, string sapinputparams, string returnobj, string FClient)
        {
            return base.Channel.GetSAPJsonAsync(functionname, sapinputparams, returnobj, FClient);
        }
        
        public System.Threading.Tasks.Task DingTalkSendConfirmAsync(string Fnumber, string FClient)
        {
            return base.Channel.DingTalkSendConfirmAsync(Fnumber, FClient);
        }
        
        public System.Threading.Tasks.Task<object> SAPSendDataToSAPAsync(string FunctionName, TlgChinaService.ArrayOfXElement InputTables, string[] InputParams, string[] OutPutParam, bool isTable, string FClient)
        {
            return base.Channel.SAPSendDataToSAPAsync(FunctionName, InputTables, InputParams, OutPutParam, isTable, FClient);
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.SAPSendDataToSAPAndResoultDataSetResponse> SAPSendDataToSAPAndResoultDataSetAsync(TlgChinaService.SAPSendDataToSAPAndResoultDataSetRequest request)
        {
            return base.Channel.SAPSendDataToSAPAndResoultDataSetAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> DelDingTalkNotActiveUserAsync()
        {
            return base.Channel.DelDingTalkNotActiveUserAsync();
        }
        
        public System.Threading.Tasks.Task<string> DownLoadDingORGAsync()
        {
            return base.Channel.DownLoadDingORGAsync();
        }
        
        public System.Threading.Tasks.Task UpdateDingTalkORGAsync(string hr_Department, string hr_user)
        {
            return base.Channel.UpdateDingTalkORGAsync(hr_Department, hr_user);
        }
        
        public System.Threading.Tasks.Task UpdateFaceRecognitionORGAsync(string hr_Department_ID, string entertype, string url)
        {
            return base.Channel.UpdateFaceRecognitionORGAsync(hr_Department_ID, entertype, url);
        }
        
        public System.Threading.Tasks.Task CallUrlAsync(string url)
        {
            return base.Channel.CallUrlAsync(url);
        }
        
        public System.Threading.Tasks.Task<string> SyncOAAsync()
        {
            return base.Channel.SyncOAAsync();
        }
        
        public System.Threading.Tasks.Task<string> SAPagainAsync()
        {
            return base.Channel.SAPagainAsync();
        }
        
        public System.Threading.Tasks.Task<TlgChinaService.WMSCheckOutResponseWMSCheckOutResult> WMSCheckOutAsync(string str)
        {
            return base.Channel.WMSCheckOutAsync(str);
        }
        
        public System.Threading.Tasks.Task<string> RobotMsgAsync(string RobotWebhook, string content, string atMobiles, bool isAtAll)
        {
            return base.Channel.RobotMsgAsync(RobotWebhook, content, atMobiles, isAtAll);
        }
        
        public System.Threading.Tasks.Task<string> EASGetApproverAsync(string OrderNo)
        {
            return base.Channel.EASGetApproverAsync(OrderNo);
        }
        
        public System.Threading.Tasks.Task<string> testqqqqAsync(string a)
        {
            return base.Channel.testqqqqAsync(a);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.lytechWebServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.lytechWebServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.lytechWebServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.tlgchina.com:5678/lytechWebService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.lytechWebServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.tlgchina.com:5678/lytechWebService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            lytechWebServiceSoap,
            
            lytechWebServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.1")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
